常用命令:

look for a process:
	ps ax | grep test.py

run python in backend:
	python test.py &

look for a process in a given port:
	lsof -i:port number


mongo connection failed solution:

	sudo rm /var/lib/mongodb/mongod.lock
	sudo mongod --repair --dbpath /var/lib/mongodb
	sudo mongod --fork --logpath /var/lib/mongodb/mongodb.log --dbpath /var/lib/mongodb 
	sudo service mongodb start

Git submodule process:
1. add submodule: git submodule add   source_url   dest_dir
2. modify .gitmodules file to use a sprcific branch (i.e. add a branch information: branch = vmware-1.15.0)
3. update submodule: git submodule update --init --recursive --remote

Git delete the first commit: 
	git rebase -i —-root 

docker rm all containers:
	docker rm $(docker rm -a -q) (docker rm -a -q) will list all container ID


琐碎知识点:

URI和URL的区别
URI 在于I(Identifier)是统一资源标示符，可以唯一标识一个资源。URL在于Locater，一般来说（URL）统一资源定位符，可以提供找到该资源的路径。
比如：URI就像身份证，而URL则是这个人的家庭住址。是URI但不是URL的例子：urn:isbn:0-486-27557-4，这个是一本书的isbn，可以唯一标识这本书，
更确切说这个是URN。总的来说，locators are also identifiers, so every URL is also a URI, but there are URIs which are not URLs

vim 中 :x 和 :wq 的真正区别:
:wq  强制性写入文件并退出。即使文件没有被修改也强制写入，并更新文件的修改时间。
:x   写入文件并退出。仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间。
 
这两者一般情况下没什么不一样，但是在编程方面，对编辑源文件可能会产生重要影响。因为文件即使没有修改，":wq"强制更新文件的修改时间，
这样会让make编译整个项目时以为文件被修改过了，然后就得重新编译链接生成可执行文件。这可能会产生让人误解的后果，当然也产生了不必要的系统资源花销。

kubenetes cluster 没起来，很可能是kubelet没起来，这个时候要查看systemd log, 和kubelet的log。syslog的位置在/var/logs/syslog。或者用systemctl status kubelet来查看kubelet状态，如果没起来，有一个可能是Kubeadm没执行。也有可能是container的repo名字没对上。这时候就要查一下kubeadm的config和kubeadm的log。

静态编译与动态编译的区别：
静态编译就是在编译时，把所有模块都编译进可执行文件里，当启动这个可执行文件时，所有模块都被加载进来；
动态编译是将应用程序需要的模块都编译成动态链接库，启动程序（初始化）时，这些模块不会被加载，运行时用到哪个模块就调用哪个
一般建议用静态编译
runC是一个遵循OCI标准的用来运行容器的命令行工具(CLI Tool)，它也是一个Runtime的实现


Golang init函数的主要作用：

初始化不能采用初始化表达式初始化的变量。
程序运行前的注册。
实现sync.Once功能。
其他
init函数的主要特点：

init函数先于main函数自动执行，不能被其他函数调用；
init函数没有输入参数、返回值；
每个包可以有多个init函数；
包的每个源文件也可以有多个init函数，这点比较特殊；
同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。
不同包的init函数按照包导入的依赖关系决定执行顺序。
golang程序初始化



golang程序初始化先于main函数执行，由runtime进行初始化，初始化顺序如下：

初始化导入的包（包的初始化顺序并不是按导入顺序（“从上到下”）执行的，runtime需要解析包依赖关系，没有依赖的包最先初始化，与变量初始化依赖关系类似，参见golang变量的初始化）；
初始化包作用域的变量（该作用域的变量的初始化也并非按照“从上到下、从左到右”的顺序，runtime解析变量依赖关系，没有依赖的变量最先初始化，参见golang变量的初始化）；
执行包的init函数；

特殊变量列表
变量
含义

$0 当前脚本的文件名

$n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。

$# 传递给脚本或函数的参数个数。

$* 传递给脚本或函数的所有参数。

$@ 传递给脚本或函数的所有参数。被双引号(" ")包含时，与 $* 稍有不同，下面将会讲到。

$? 上个命令的退出状态，或函数的返回值。

$$ 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。

$* 和 $@ 的区别
$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(" ")包含时，都以"$1" "$2" … "$n" 的形式输出所有参数。
但是当它们被双引号(" ")包含时，"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式输出所有参数；"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数

Python self :
self在定义时需要定义，但是在调用时会自动传入。
self的名字并不是规定死的，但是最好还是按照约定是用self
self总是指调用时的类的实例, 不是类本身。

Go Context
比如一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。所以我们需要一种可以跟踪goroutine的方案，才可以达到控制他们的目的，这就是Go语言为我们提供的Context，称之为上下文非常贴切，它就是goroutine的上下文。

切片的长度是切片中元素的数量
切片的容量是从创建切片的索引开始的底层数组中元素的数量
切片是可索引的，并且可以由len()方法获取长度，切片提供了计算容量的方法cap()，可以测量切片最长可以达到多少。
切片实际的是获取数组的某一部分，len切片<=cap切片<=len数组

在shell中

'>'  为创建: echo "hello shell"  > out.txt
'>>' 为追加: echo "hello shell"  >> out.txt

当out.txt 文本不存在时,'>'与'>>'都会默认创建out.txt文本，并将hello shell 字符串保存到out.txt中

当out.txt文本存在时，'>'会将out.txt文本中的内容清空，并将hello shell 字符串存, 而'>>'会将 hello shell追加保存到out.txt的末尾


bash script可以当做binary来执行。比如bazel.sh，当去掉文件后缀.sh，就可以./bazel


golang build in container example:
docker run --rm \
-v "${PWD}:/go/src/sigs.k8s.io/kind" \
-v "${PWD}/bin:/go/bin" \
-w "/go/src/sigs.k8s.io/kind" \
--env CGO_ENABLED=0 \
--env GOOS=${GOOS:-linux} \
--env GOARCH=${GOARCH:-amd64} \
--env GO111MODULE=on \
golang:${golangVersion} \
go build -a -ldflags '-extldflags "-static"' -o /go/bin/kind


special charactors

#! /bin/sh
echo '$#' $#
echo '$@' $@
echo '$?' $?

run as ./test.sh 1 2 3 4

output will be:
$#  4
$@  1 2 3 4
$?  0

$# means number of arguments. Answer is 3
$@ means what parameters were passed. Answer is 1 2 3
$? means was last command successful. Answer is 0 which means 'yes'


python 初始化二维数组：
如果是 B = [[0]*3]*4来创建二维数组， 那么
>>> B
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
但是，B[0][1] = 2，输出：
>>> B
[[0, 2, 0], [0, 2, 0], [0, 2, 0], [0, 2, 0]]

按照B = [[0]*3]*4来创建二维数组只是4个指向这个空列表元素的引用,修改任何一个元素都会改变整个列表

在Python中创建二维数组应该这样写：
C = [[0]*3 for i in range(4)]
>>> C[0][1] = 2
>>> C
[[0, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]

通用：aList = [[0] * cols for i in range(rows)]

互斥锁 and 读写锁
互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。 一次只能一个线程拥有互斥锁，其他线程只有等待
读写锁特点：
1）多个读者可以同时进行读 2）写者必须互斥（只允许一个写者写，也不能读者写者同时进行） 3）写者优先于读者（一旦有写者，则后续读者必须等待，唤醒时优先考虑写者）

libseccomp package: runC needs this
seccomp是一种内核中的安全机制,正常情况下,程序可以使用所有的syscall,这是不安全的,比如劫持程序流后通过execve的syscall来getshell.通过seccomp我们可以在程序中禁用掉某些syscall,这样就算劫持了程序流也只能调用部分的syscall了



dockerd, containerd, ctr,shim, runc,等这几个进程的关系

- docker是cli
- dockerd是docker engine守护进程，dockerd启动时会启动containerd子进程
- dockerd与containerd通过rpc进行通信
- ctr是containerd的cli
- containerd通过shim操作runc，runc真正控制容器生命周期
- 启动一个容器就会启动一个shim进程
- shim直接调用runc的包函数,shim与containerd之前通过rpc通信
- 真正用户想启动的进程由runc的init进程启动，即runc init [args ...]


${BASH_SOURCE[0]}表示bash脚本的第一个参数
"dirname"表示提取参数里的目录，dirname "${BASH_SOURCE[0]}"表示提取bash脚本第一个参数里的目录


SQL vs NoSQL
一. 表
SQL中的表结构具有严格的数据模式约束： 存储数据很难出错。
NoSQL存储数据更加灵活自由：可能导致数据不一致性问题的发生。

二. 数据库的模式
SQL 模式
关系型数据库中，在把数据存储进去前，你需要做很多工作，如设置数据库字符集，定义主键，设置各个字段的类型，设置索引等等，这些就是关系型数据库的模式，这些模式的限制，让表结构有着严格的约束。
NoSQL 无模式
而非关系型数据库的数据可以随时写入，不需要去事先定好各种条条框框，也正因为如此，NoSQL 数据库更适合于那些不能够确定数据需求的的工程项目。

三. 数据库的规范化
例如，有两个表购物表和用户表
SQL 会关联两个表，NoSQL直接添加所有信息

四. 事务(Transact)
SQL 数据库中提供了事务操作，将两条或者多条更新操作结合成一个事务（要么全部执行成功要么都失败）。
而 NoSQL 数据库则缺乏传统的事务机制，不过很多 NoSQL 数据库也有各自的方式去处理这一类问题

五. 操作语法
SQL 数据库使用传统的 SQL 语言来进行增删查改，而 NoSQL 数据库则使用各自的语法来进行操作。

六. 适用场景
适合使用 SQL 开发的项目：
数据库模式，结构可以预先规定的，或者可以相对固定的项目
要求数据一致性
具有良好的开发者经验和技术支持的标准的成熟技术

适合使用 NoSQL 开发的项目：
不相关，不确定和逐步发展的数据需求
更简单或者更宽松的能够快速开始编程的项目
速度和可扩展性至关重要的


注意，当两个变量交换时，不能写成
nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]
nums[i] will be modified first and then affect the second variable nums[nums[i] - 1]


Docker image ID and digest:
The "digest" is a hash of the manifest, introduced in Docker registry v2.
The image ID is a hash of the local image JSON configuration.

Docker has different storage driver. 
如device mapper, overlay, overlay2. 
containerd 默认的storage driver是overlay. 所以说如果用docker 产生的Image, 不是用的overlay作为driver, 那么用containerd pull或者import image, 有可能会出错。其中一种解决方法是，ctr image import --snapshottor=native， 加个native参数


dash (-) in yaml:it may help to convert to JSON.
e.g.
- "string1"
- "string2"

In JSON:
["string1", "string2"]

e.g.
- item1key1: "string1"
  item1key2: "string2"
- item2key1: "string3"
  item2key2: "string4"

In JSON:
[{
  item1key1: "string1",
  item1key2: "string2"
},{
  item2key1: "string3",
  item2key2: "string4"
}]

tar vs tar.gz
tar只是将文件打包，文件的大小没什么变化，一般用tar -cvf filename.tar 
tar.gz是加入了gzip的压缩命令，会将文件压缩存放，可以有效压缩文件的大小，以便于缩短传输时间或者释放磁盘空间，一般用tar -czvf filename.tar.gz filename。

解包的时候使用 tar -xvf filename.tar和tar -xzvf filename.tar.gz。
P.S. tgz 就是 tar.gz的简写，两者的格式没有区别
一些参数：
-v: 动作显示，显示出每个解压出来的文件，如果去掉该参数解压过程会变得快些，只是不显示动作而已
------------------------------
五个独立命令：
-c: 建立压缩档案
-x：解压
-t：查看内容
-r：向压缩归档文件末尾追加文件
-u：更新原压缩包中的文件
这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。

-z：有gzip属性的,比如 tar.gz/tgz结尾的
-j：有bz2属性的
-Z：有compress属性的
-O：将文件解开到标准输出

下面的参数-f是必须的

-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。



Full script to disable apt daily service
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#!/bin/bash
set -o errexit
set -o pipefail
set -o xtrace

systemctl stop apt-daily.timer
systemctl disable apt-daily.timer
systemctl mask apt-daily.service
systemctl daemon-reload

# cannot use /etc/apt/apt.conf.d/10periodic as suggested in
# /usr/lib/apt/apt.systemd.daily, as Ubuntu distributes the
# unattended upgrades stuff with priority 20 and 50 ...
# so override everything with a 99xxx file
cat > /etc/apt/apt.conf.d/99elasticluster <<__EOF
APT::Periodic::Enable "0";
// undo what's in 20auto-upgrade
APT::Periodic::Update-Package-Lists "0";
APT::Periodic::Unattended-Upgrade "0";
__EOF

mv /usr/lib/apt/apt.systemd.daily /usr/lib/apt/apt.systemd.daily.DISABLED

systemctl stop apt-daily.service
systemctl kill --kill-who=all apt-daily.service

# wait until `apt-get updated` has been killed
while ! (systemctl list-units --all apt-daily.service | egrep -q '(dead|failed)')
do
  sleep 1;
done

sleep 1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

sed cmd: sed -i -e "s#%%ABC%%#${VAR}#" file


string "escape"的意思
escape是转义的意思，转义字符就是escape character。例如：
"our favorate number is 8, \n because it meansrich in chinese." 因为加上了\n, 计算机读到这里就明白了，是要换行。所以\之后的字符“逃离”了原本需要被打印出来的宿命。

jq -r 可以parse带有转义字符的数据。-r表示raw的意思，it will unescape characters.

zip文件的时候：zip -r xxx.zip dir1 dir2 file1 file2

shell 中，把string按照分隔符分割：
shell 中特殊变量 IFS
IFS 是内置分隔符。例子：
OLDIFS=$IFS
text='a a a a,b b b b,c c c c'
IFS="," read -ra array <<< "${text}"
for i in ${text[@]};
do 
  echo "i=$i";
done
IFS=${OLDIFS}
输出是:
i=a a a a
i=b b b b
i=c c c c
这里，分隔符就是"," 。注意，要把IFS还原为原值。IFS最好和要执行的语句在同一行


bash for loop:

array=(1 2 3)
array_length=${#array[@]}
for (( i=0; i<${array_length}; i++ )); do
  echo "index is ${i}, value is ${array[$i]}"
done

output:
index is 0, value is 1
index is 1, value is 2
index is 2, value is 3


bash cut a range usage:

> echo "ref_categorie=test" | cut -c1-15-
test
> echo "ref_categorie=test" | cut -c1-14-
=test
echo "ref_categorie=test" | cut -c15-
test
echo "ref_categorie=test" | cut -c15 
t
>
-c15 will cut character position 15
-c1-15 will cut character positions 1 thru 15
-c15- will cut from character position 15 to the end
-c1-5,10-11,21-
cut positions 1 through 5, 10 through 11, and from 21 to the end


sudo 直接传password，不用跳出光标
sudo -S "password" <<< command
或者 echo "password" | sudo -S command


git delete all merged local branch:
git branch -D `git branch --merged | grep -v \* | xargs`


sudo 不用password:

1. Open the /etc/sudoers file by running: sudo visudo
2. At the end of the /etc/sudoers file add this line: username     ALL=(ALL) NOPASSWD:ALL, where username is the account name. then save and quit

ssh 执行代码不用登陆：
sshpass -p '{password}' ssh -o StrictHostKeyChecking=no root@${IP_ADDRESS} 'sh -s' < file



如何ssh to ipv6地址：

如果IPv6 地址是fe80::开头 
ssh <username>@<ipv6 address>%<interface>， interface是eth0, wlan0, enp3s0, wlp4s0 or tap1.可以用ifconfig寻找
如果IPv6 地址不是fe80::开头
ssh <username>@<ipv6 address>


Difference between return 1, return 0, return -1 and exit
return from main() is equivalent to exit

return in an inner function (not main) will terminate immediately the execution of the specific function returning the given result to the calling function.

exit from anywhere on your code will terminate program execution immediately.

完全清除遗留的gitmodules
首先，try 
git rm --cached path_to_submodule 
rm -rf path_to_submodule

Then:

Delete the relevant lines from the .gitmodules file. e.g. delete these:

[submodule "path_to_submodule"]
    path = path_to_submodule
    url = https://github.com/path_to_submodule

Delete the relevant section from .git/config. e.g. delete these:

[submodule "path_to_submodule"]
    url = https://github.com/path_to_submodule

rm -rf .git/modules/path_to_submodule


git submodule fatal : Needed a single revision 的原因
这个多半是因submodule 的 url 有所修改导致的

CI/CD:
CI: running bunch of tests and showing a flag
CD: take a set of commits, putting them in order, and making sure at every stage that the its green.

Golang marshal 到json时: 可以用 json.MarshalIndent(var, "", "  ")

k8s configMap:
configmap是k8s的一个配置管理组件，可以将配置以key-value的形式传递，通常用来保存不需要加密的配置信息，加密信息则需用到Secret，主要用来应对以下场景：

使用k8s部署应用，当你将应用配置写进代码中，就会存在一个问题，更新配置时也需要打包镜像，configmap可以将配置信息和docker镜像解耦。
使用微服务架构的话，存在多个服务共用配置的情况，如果每个服务中单独一份配置的话，那么更新配置就很麻烦，使用configmap可以友好的进行配置共享。
其次，configmap可以用来保存单个属性，也可以用来保存配置文件。

